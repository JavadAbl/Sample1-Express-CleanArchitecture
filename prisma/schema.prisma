// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/Infrastructure/Database/Prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int     @id @default(autoincrement())
  username       String  @unique
  password       String
  email          String  @unique
  firstName      String
  lastName       String
  bio            String?
  image          String?
  followersCount Int     @default(0)
  followingCount Int     @default(0)
  postsCount     Int     @default(0)
  isActive       Boolean @default(true)

  followers    UserFollow[]   @relation("UserFollowers")
  following    UserFollow[]   @relation("UserFollowing")
  blocked      UserBlock[]    @relation("UserBlocker")
  blockedBy    UserBlock[]    @relation("UserBlocked")
  Post         Post[]
  Notification Notification[]
  UserSocial   UserSocial?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFollow {
  follower   User @relation("UserFollowers", fields: [followerId], references: [id])
  followerId Int

  following   User @relation("UserFollowing", fields: [followingId], references: [id])
  followingId Int

  followedAt DateTime @default(now())

  @@id([followerId, followingId])
}

model UserBlock {
  blocker   User @relation("UserBlocker", fields: [blockerId], references: [id])
  blockerId Int

  blocked   User @relation("UserBlocked", fields: [blockedId], references: [id])
  blockedId Int

  blockedAt DateTime @default(now())

  @@id([blockerId, blockedId])
}

model UserSocial {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  twitter   String?
  facebook  String?
  instagram String?
  linkedin  String?

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  Int

  author User @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([title, published])
}

model Notification {
  id      Int     @id @default(autoincrement())
  message String
  read    Boolean @default(false)
  userId  Int

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
